学习资料链接：
https://blog.csdn.net/mukes/article/details/115693833
https://blog.csdn.net/m0_73972962/article/details/145406846
https://blog.csdn.net/TroyeSivanlp/article/details/121172010
https://blog.csdn.net/qq_29493173/article/details/113094143
https://blog.csdn.net/ingenuou_/article/details/107452638
https://blog.csdn.net/qq_29493173/article/details/113094143
https://blog.csdn.net/li1325169021/article/details/140958106
https://blog.csdn.net/G_matinal/article/details/137794921
https://gitwebcn.com/26675.html


一、学习与实践

寻找学习资料
通过阅读这些资料，我了解了打地鼠游戏的基本逻辑和实现方式，包括地鼠的随机出现、点击事件的处理等，通过html、css、JavaScript实现交互效果。
编写代码
在本地使用代码编辑器（如VSCode）编写了打地鼠游戏的HTML代码。
通过CSS进行样式设计，使游戏界面更加美观。
使用JavaScript添加交互功能，实现地鼠的随机出现和点击得分的效果。

二、Git本地仓库配置

安装Git
在本地计算机上下载并安装了Git版本控制软件。
配置了Git的基本信息，包括用户名和邮箱。
创建本地仓库

使用git commit -m "初始提交"命令提交了第一次代码，并附上了提交信息。

三、远程仓库配置与代码推送

注册远程仓库账号
我选择了GitHub作为远程仓库，注册了一个新的账号。
在GitHub上创建了一个新的公开仓库，用于存储打地鼠游戏的代码。
推送代码到远程仓库

四、总结与反思
通过本次实践，我不仅学会了如何实现打地鼠游戏的网页设计，还掌握了Git版本控制的基本操作。我深刻体会到版本控制对于项目管理的重要性，它可以帮助我更好地追踪代码变更、协作开发以及备份代码。在未来的学习和工作中，我将继续深化这些技能的应用。